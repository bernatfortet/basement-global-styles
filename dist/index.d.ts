import React from 'react';
export declare const mediaProps: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>[];
export declare const Column: import("styled-components").StyledComponentClass<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, any, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>>;
export declare const Row: import("styled-components").StyledComponentClass<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, any, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>>;
export declare const Box: import("styled-components").StyledComponentClass<{}, any, Pick<{}, never> & {
    theme?: any;
}>;
declare const globalStyles: {
    size: (size: any) => string;
    anim: import("styled-components").InterpolationValue[];
    media: {
        sm: (...args: any[]) => import("styled-components").InterpolationValue[];
        md: (...args: any[]) => import("styled-components").InterpolationValue[];
        lg: (...args: any[]) => import("styled-components").InterpolationValue[];
        w: (width: any, ...args: any[]) => import("styled-components").InterpolationValue[];
    };
    hideVisually: import("styled-components").InterpolationValue[];
    unselectable: import("styled-components").InterpolationValue[];
    untouchable: import("styled-components").InterpolationValue[];
    actionable: import("styled-components").InterpolationValue[];
    boxProps: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>[];
    spacingProps: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>[];
    textProps: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>[];
    dimensionProps: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>[];
    mediaDimensions: {
        sm: number;
        md: number;
        lg: number;
    };
    pabs: string;
    prel: string;
    flex: string;
    flx: string;
    flex1: string;
    flxRow: string;
    flxCol: string;
    flxRowReverse: string;
    flxColReverse: string;
    flxWrap: string;
    aifs: string;
    aic: string;
    ais: string;
    aife: string;
    aib: string;
    jcc: string;
    jcfs: string;
    jcfe: string;
    jcsb: string;
    jcsa: string;
    asfs: string;
    asfe: string;
    asc: string;
    ass: string;
    jsfs: string;
    jsfe: string;
    jsc: string;
    jss: string;
    if: string;
    tal: string;
    tac: string;
    tar: string;
    ofh: string;
    cover: string;
    contain: string;
    anchor: string;
    full: string;
    ellipsis: string;
};
export { globalStyles as s };
export { parseUnit } from './utils';
